package com.example.quizgenerator

// --- Imports ---
import android.os.Bundle
import androidx.activity.ComponentActivity
import androidx.activity.compose.setContent
import androidx.compose.animation.AnimatedVisibility
import androidx.compose.animation.core.LinearOutSlowInEasing
import androidx.compose.animation.core.tween
import androidx.compose.animation.fadeIn
import androidx.compose.animation.fadeOut
import androidx.compose.animation.slideInVertically
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.rememberScrollState
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.foundation.text.KeyboardOptions
import androidx.compose.foundation.verticalScroll
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.draw.blur
import androidx.compose.ui.draw.clip
import androidx.compose.ui.graphics.Brush
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.text.SpanStyle
import androidx.compose.ui.text.buildAnnotatedString
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.input.KeyboardType
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.text.withStyle
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import com.example.quizgenerator.ui.theme.QuizGeneratorTheme
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import okhttp3.*
import okhttp3.MediaType.Companion.toMediaTypeOrNull
import okhttp3.RequestBody.Companion.toRequestBody
import org.json.JSONArray
import org.json.JSONObject
import java.io.IOException

// --- Main Activity ---
class MainActivity : ComponentActivity() {
    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        setContent {
            QuizGeneratorTheme {
                Surface(
                    modifier = Modifier.fillMaxSize(),
                    color = MaterialTheme.colorScheme.background
                ) {
                    TechQuizGeneratorScreen()
                }
            }
        }
    }
}

// --- Custom Colors ---
private val neonBlue = Color(0xFF00FFFF)
private val deepPurple = Color(0xFF1A0933)
private val darkBlue = Color(0xFF0B0B2B)
private val brightPurple = Color(0xFF9C27B0)
private val radiantBlue = Color(0xFF0288D1)
private val neonPink = Color(0xFFFF00FF)
private val neonGreen = Color(0xFF00FF66)

// --- Course Visualization Tab Options ---
enum class VisualizationTab { MINDMAP, FLOWCHART, NONE }

// --- Composable: Tech Quiz Generator Screen ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TechQuizGeneratorScreen() {
    var topic by remember { mutableStateOf("") }
    var numQuestions by remember { mutableStateOf("") }
    var difficulty by remember { mutableStateOf("Medium") }
    var generatedQuiz by remember { mutableStateOf("") }
    var suggestedCourse by remember { mutableStateOf("") }
    var courseMindmap by remember { mutableStateOf("") }
    var courseFlowchart by remember { mutableStateOf("") }
    var isLoading by remember { mutableStateOf(false) }
    var errorMessage by remember { mutableStateOf("") }
    var showQuiz by remember { mutableStateOf(false) }
    var selectedTab by remember { mutableStateOf(VisualizationTab.NONE) }
    val scrollState = rememberScrollState()

    Box(
        modifier = Modifier
            .fillMaxSize()
            .background(
                Brush.verticalGradient(
                    colors = listOf(
                        deepPurple,
                        darkBlue
                    )
                )
            )
    ) {
        // Blurred Background Elements
        Box(
            modifier = Modifier
                .size(200.dp)
                .offset((-50).dp, (-30).dp)
                .background(
                    brush = Brush.radialGradient(
                        colors = listOf(brightPurple.copy(alpha = 0.2f), Color.Transparent),
                        radius = 200f
                    )
                )
                .blur(30.dp)
        )

        Box(
            modifier = Modifier
                .size(300.dp)
                .offset(200.dp, 400.dp)
                .background(
                    brush = Brush.radialGradient(
                        colors = listOf(radiantBlue.copy(alpha = 0.15f), Color.Transparent),
                        radius = 300f
                    )
                )
                .blur(50.dp)
        )

        // Main Content
        Column(
            modifier = Modifier
                .fillMaxSize()
                .verticalScroll(scrollState)
                .padding(24.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {
            // Futuristic Header
            Text(
                text = buildAnnotatedString {
                    withStyle(style = SpanStyle(color = Color.White, fontWeight = FontWeight.Bold)) {
                        append("AI ")
                    }
                    withStyle(style = SpanStyle(color = neonBlue, fontWeight = FontWeight.Bold)) {
                        append("QUIZ")
                    }
                    withStyle(style = SpanStyle(color = Color.White, fontWeight = FontWeight.Light)) {
                        append(" GENERATOR")
                    }
                },
                fontSize = 36.sp,
                textAlign = TextAlign.Center,
                letterSpacing = 2.sp
            )

            Text(
                text = "powered by Gemini",
                color = Color.White.copy(alpha = 0.6f),
                fontSize = 14.sp,
                letterSpacing = 3.sp,
                modifier = Modifier.padding(bottom = 36.dp)
            )

            // Elevated Input Card
            Card(
                modifier = Modifier
                    .fillMaxWidth()
                    .padding(vertical = 8.dp),
                colors = CardDefaults.cardColors(
                    containerColor = Color(0xFF1E1E2E).copy(alpha = 0.7f)
                ),
                elevation = CardDefaults.cardElevation(defaultElevation = 8.dp),
                shape = RoundedCornerShape(16.dp)
            ) {
                Column(
                    modifier = Modifier
                        .fillMaxWidth()
                        .padding(24.dp),
                    horizontalAlignment = Alignment.CenterHorizontally,
                    verticalArrangement = Arrangement.spacedBy(20.dp)
                ) {
                    // Input Fields with Futuristic Style
                    OutlinedTextField(
                        value = topic,
                        onValueChange = { topic = it },
                        label = { Text("Topic", color = Color.White.copy(alpha = 0.8f)) },
                        modifier = Modifier
                            .fillMaxWidth()
                            .clip(RoundedCornerShape(12.dp)),
                        shape = RoundedCornerShape(12.dp),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedContainerColor = Color(0xFF2D2D3A),
                            unfocusedContainerColor = Color(0xFF252533),
                            focusedBorderColor = neonBlue,
                            unfocusedBorderColor = Color.Gray.copy(alpha = 0.3f),
                            focusedTextColor = Color.White,
                            unfocusedTextColor = Color.White
                        )
                    )

                    OutlinedTextField(
                        value = numQuestions,
                        onValueChange = {
                            if (it.isEmpty() || it.all { char -> char.isDigit() }) {
                                numQuestions = it
                            }
                        },
                        label = { Text("Number of Questions", color = Color.White.copy(alpha = 0.8f)) },
                        keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number),
                        modifier = Modifier
                            .fillMaxWidth()
                            .clip(RoundedCornerShape(12.dp)),
                        shape = RoundedCornerShape(12.dp),
                        colors = OutlinedTextFieldDefaults.colors(
                            focusedContainerColor = Color(0xFF2D2D3A),
                            unfocusedContainerColor = Color(0xFF252533),
                            focusedBorderColor = neonBlue,
                            unfocusedBorderColor = Color.Gray.copy(alpha = 0.3f),
                            focusedTextColor = Color.White,
                            unfocusedTextColor = Color.White
                        )
                    )

                    TechDifficultyDropdown(selected = difficulty) { difficulty = it }

                    if (errorMessage.isNotEmpty()) {
                        Text(
                            text = errorMessage,
                            color = Color(0xFFFF6B6B),
                            modifier = Modifier.padding(top = 4.dp)
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(32.dp))

            // Glowing Generate Button
            Button(
                onClick = {
                    if (topic.isBlank()) {
                        errorMessage = "Please enter a topic"
                    } else if (numQuestions.isBlank()) {
                        errorMessage = "Please enter number of questions"
                    } else {
                        errorMessage = ""
                        isLoading = true
                        showQuiz = false
                        selectedTab = VisualizationTab.NONE
                        generateQuizWithVisualization(topic, numQuestions, difficulty) { quizResult, courseResult, mindmapResult, flowchartResult ->
                            generatedQuiz = quizResult
                            suggestedCourse = courseResult
                            courseMindmap = mindmapResult
                            courseFlowchart = flowchartResult
                            isLoading = false
                            showQuiz = true
                        }
                    }
                },
                modifier = Modifier
                    .fillMaxWidth(0.7f)
                    .height(56.dp),
                enabled = !isLoading,
                shape = RoundedCornerShape(28.dp),
                colors = ButtonDefaults.buttonColors(
                    containerColor = Color.Transparent,
                    disabledContainerColor = Color.Transparent
                ),
                contentPadding = PaddingValues(0.dp)
            ) {
                Box(
                    modifier = Modifier
                        .fillMaxSize()
                        .background(
                            brush = Brush.horizontalGradient(
                                colors = if (!isLoading) {
                                    listOf(
                                        brightPurple,
                                        radiantBlue
                                    )
                                } else {
                                    listOf(
                                        Color.Gray.copy(alpha = 0.5f),
                                        Color.Gray.copy(alpha = 0.7f)
                                    )
                                }
                            ),
                            shape = RoundedCornerShape(28.dp)
                        ),
                    contentAlignment = Alignment.Center
                ) {
                    if (isLoading) {
                        Row(
                            verticalAlignment = Alignment.CenterVertically,
                            horizontalArrangement = Arrangement.spacedBy(12.dp)
                        ) {
                            CircularProgressIndicator(
                                color = Color.White,
                                modifier = Modifier.size(24.dp),
                                strokeWidth = 2.dp
                            )
                            Text(
                                "Generating...",
                                color = Color.White,
                                fontWeight = FontWeight.Medium
                            )
                        }
                    } else {
                        Text(
                            "GENERATE QUIZ",
                            color = Color.White,
                            fontWeight = FontWeight.Bold,
                            letterSpacing = 1.5.sp
                        )
                    }
                }
            }

            Spacer(modifier = Modifier.height(32.dp))

            // Animated Results
            AnimatedVisibility(
                visible = showQuiz,
                enter = fadeIn(animationSpec = tween(durationMillis = 500, easing = LinearOutSlowInEasing)) +
                        slideInVertically(
                            animationSpec = tween(durationMillis = 500, easing = LinearOutSlowInEasing),
                            initialOffsetY = { it / 2 }
                        ),
                exit = fadeOut()
            ) {
                Column {
                    if (suggestedCourse.isNotEmpty()) {
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = Color(0xFF2D2D4A).copy(alpha = 0.8f)
                            ),
                            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                            shape = RoundedCornerShape(16.dp)
                        ) {
                            Column(modifier = Modifier.padding(24.dp)) {
                                Text(
                                    text = "RECOMMENDED COURSE",
                                    color = neonBlue,
                                    fontSize = 16.sp,
                                    fontWeight = FontWeight.Bold,
                                    letterSpacing = 1.5.sp
                                )
                                Spacer(modifier = Modifier.height(12.dp))
                                Text(
                                    text = suggestedCourse,
                                    color = Color.White,
                                    fontSize = 16.sp,
                                    lineHeight = 24.sp
                                )

                                if (courseMindmap.isNotEmpty() && courseFlowchart.isNotEmpty()) {
                                    Spacer(modifier = Modifier.height(16.dp))

                                    // Visualization Tabs
                                    Row(
                                        modifier = Modifier.fillMaxWidth(),
                                        horizontalArrangement = Arrangement.spacedBy(8.dp)
                                    ) {
                                        TabButton(
                                            title = "MINDMAP",
                                            color = neonGreen,
                                            isSelected = selectedTab == VisualizationTab.MINDMAP,
                                            onClick = { selectedTab = VisualizationTab.MINDMAP },
                                            modifier = Modifier.weight(1f)
                                        )

                                        TabButton(
                                            title = "FLOWCHART",
                                            color = neonPink,
                                            isSelected = selectedTab == VisualizationTab.FLOWCHART,
                                            onClick = { selectedTab = VisualizationTab.FLOWCHART },
                                            modifier = Modifier.weight(1f)
                                        )
                                    }

                                    Spacer(modifier = Modifier.height(16.dp))

                                    // Visualization Content
                                    AnimatedVisibility(
                                        visible = selectedTab != VisualizationTab.NONE,
                                        enter = fadeIn(animationSpec = tween(durationMillis = 300)),
                                        exit = fadeOut(animationSpec = tween(durationMillis = 300))
                                    ) {
                                        Card(
                                            colors = CardDefaults.cardColors(
                                                containerColor = Color(0xFF1A1A2E)
                                            ),
                                            shape = RoundedCornerShape(12.dp),
                                            modifier = Modifier
                                                .fillMaxWidth()
                                                .padding(vertical = 8.dp)
                                        ) {
                                            when (selectedTab) {
                                                VisualizationTab.MINDMAP -> {
                                                    Text(
                                                        text = courseMindmap,
                                                        color = Color.White,
                                                        fontSize = 16.sp,
                                                        lineHeight = 24.sp,
                                                        modifier = Modifier.padding(16.dp)
                                                    )
                                                }
                                                VisualizationTab.FLOWCHART -> {
                                                    Text(
                                                        text = courseFlowchart,
                                                        color = Color.White,
                                                        fontSize = 16.sp,
                                                        lineHeight = 24.sp,
                                                        modifier = Modifier.padding(16.dp)
                                                    )
                                                }
                                                else -> { /* Nothing to show */ }
                                            }
                                        }
                                    }
                                }
                            }
                        }
                    }

                    if (generatedQuiz.isNotEmpty()) {
                        Spacer(modifier = Modifier.height(16.dp))
                        Card(
                            modifier = Modifier
                                .fillMaxWidth()
                                .padding(vertical = 8.dp),
                            colors = CardDefaults.cardColors(
                                containerColor = Color(0xFF1C1C2E).copy(alpha = 0.9f)
                            ),
                            elevation = CardDefaults.cardElevation(defaultElevation = 6.dp),
                            shape = RoundedCornerShape(16.dp)
                        ) {
                            Column(modifier = Modifier.padding(24.dp)) {
                                Text(
                                    text = "QUIZ QUESTIONS",
                                    color = neonBlue,
                                    fontSize = 16.sp,
                                    fontWeight = FontWeight.Bold,
                                    letterSpacing = 1.5.sp,
                                    modifier = Modifier.padding(bottom = 16.dp)
                                )

                                Text(
                                    text = generatedQuiz,
                                    color = Color.White,
                                    fontSize = 16.sp,
                                    lineHeight = 24.sp
                                )
                            }
                        }
                    }
                }
            }

            // Add bottom spacing
            Spacer(modifier = Modifier.height(50.dp))
        }
    }
}

// --- Tab Button ---
@Composable
fun TabButton(
    title: String,
    color: Color,
    isSelected: Boolean,
    onClick: () -> Unit,
    modifier: Modifier = Modifier
) {
    Button(
        onClick = onClick,
        modifier = modifier.height(44.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = if (isSelected) color.copy(alpha = 0.2f) else Color.Transparent,
            contentColor = if (isSelected) color else Color.White.copy(alpha = 0.7f)
        ),
        shape = RoundedCornerShape(8.dp),
        border = ButtonDefaults.outlinedButtonBorder.copy(
            brush = Brush.horizontalGradient(
                colors = if (isSelected) listOf(color, color.copy(alpha = 0.5f)) else listOf(Color.Gray.copy(0.3f), Color.Gray.copy(0.1f))
            )
        )
    ) {
        Text(
            text = title,
            fontWeight = if (isSelected) FontWeight.Bold else FontWeight.Normal,
            letterSpacing = 1.sp
        )
    }
}

// --- Tech Styled Difficulty Dropdown ---
@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun TechDifficultyDropdown(selected: String, onSelected: (String) -> Unit) {
    var expanded by remember { mutableStateOf(false) }
    val options = listOf("Easy", "Medium", "Hard", "Expert")

    ExposedDropdownMenuBox(
        expanded = expanded,
        onExpandedChange = { expanded = !expanded }
    ) {
        OutlinedTextField(
            value = selected,
            onValueChange = {},
            readOnly = true,
            label = { Text("Difficulty", color = Color.White.copy(alpha = 0.8f)) },
            trailingIcon = { ExposedDropdownMenuDefaults.TrailingIcon(expanded = expanded) },
            modifier = Modifier
                .fillMaxWidth()
                .menuAnchor()
                .clip(RoundedCornerShape(12.dp)),
            shape = RoundedCornerShape(12.dp),
            colors = OutlinedTextFieldDefaults.colors(
                focusedContainerColor = Color(0xFF2D2D3A),
                unfocusedContainerColor = Color(0xFF252533),
                focusedBorderColor = neonBlue,
                unfocusedBorderColor = Color.Gray.copy(alpha = 0.3f),
                focusedTextColor = Color.White,
                unfocusedTextColor = Color.White,
                focusedTrailingIconColor = Color.White,
                unfocusedTrailingIconColor = Color.White.copy(alpha = 0.7f)
            )
        )

        DropdownMenu(
            expanded = expanded,
            onDismissRequest = { expanded = false },
            modifier = Modifier
                .exposedDropdownSize()
                .background(Color(0xFF2D2D3A))
        ) {
            options.forEach { option ->
                DropdownMenuItem(
                    text = { Text(option, color = Color.White) },
                    onClick = {
                        onSelected(option)
                        expanded = false
                    },
                    colors = MenuDefaults.itemColors(
                        textColor = Color.White,
                        leadingIconColor = Color.White
                    )
                )
            }
        }
    }
}

// --- API Key ---
private const val API_KEY = "AIzaSyDwKHmNRal-a4bNu_EsvElinzdPD2yi9ts"

// --- Quiz Generator Function with Course Suggestions and Visualizations ---
fun generateQuizWithVisualization(
    topic: String,
    numQuestions: String,
    difficulty: String,
    onResult: (String, String, String, String) -> Unit
) {
    val client = OkHttpClient()

    val prompt = """
        Generate $numQuestions $difficulty difficulty quiz questions with answers on "$topic". 
        
        Then, suggest a specific course or learning resource that would help students prepare for this quiz.
        
        After that, create:
        1. A detailed mindmap of the key concepts covered in the course
        2. A learning flowchart showing the progression of topics in the course
        
        Format your response exactly as follows:
        
        QUIZ:
        [Quiz questions and answers here]
        
        RECOMMENDED COURSE:
        [Course name and brief description here]
        
        MINDMAP:
        [Detailed text description of a mindmap for this course, with main concepts and relationships]
        
        FLOWCHART:
        [Detailed text description of a learning flowchart for this course, showing progression of topics]
    """.trimIndent()

    val json = JSONObject().apply {
        put("contents", JSONArray().put(
            JSONObject().apply {
                put("role", "user")
                put("parts", JSONArray().put(
                    JSONObject().apply {
                        put("text", prompt)
                    }
                ))
            }
        ))
        put("generationConfig", JSONObject().apply {
            put("temperature", 0.7)
            put("maxOutputTokens", 2000)
        })
    }

    val requestBody = json.toString().toRequestBody("application/json".toMediaTypeOrNull())

    println("Gemini Request: ${json.toString()}")

    val request = Request.Builder()
        .url("https://generativelanguage.googleapis.com/v1/models/gemini-1.5-flash:generateContent?key=$API_KEY")
        .header("Content-Type", "application/json")
        .post(requestBody)
        .build()

    client.newCall(request).enqueue(object : Callback {
        override fun onFailure(call: Call, e: IOException) {
            CoroutineScope(Dispatchers.Main).launch {
                onResult("Failed: ${e.localizedMessage}", "", "", "")
            }
        }

        override fun onResponse(call: Call, response: Response) {
            CoroutineScope(Dispatchers.Main).launch {
                val responseBody = response.body?.string()
                println("Response Code: ${response.code}")
                println("Response Body: $responseBody")

                if (response.isSuccessful) {
                    if (responseBody != null) {
                        try {
                            val jsonObj = JSONObject(responseBody)
                            val content = jsonObj.getJSONArray("candidates")
                                .getJSONObject(0)
                                .getJSONObject("content")
                                .getJSONArray("parts")
                                .getJSONObject(0)
                                .getString("text")

                            // Split the content into sections
                            val sections = processContentWithVisualizations(content)
                            onResult(sections.first, sections.second, sections.third, sections.fourth)
                        } catch (e: Exception) {
                            onResult("Error parsing response: ${e.message}\n\nResponse: $responseBody", "", "", "")
                        }
                    } else {
                        onResult("Empty response", "", "", "")
                    }
                } else {
                    onResult("Error ${response.code}: $responseBody", "", "", "")
                }
            }
        }
    })
}

// Helper function to process the response and extract all sections
fun processContentWithVisualizations(content: String): Quad<String, String, String, String> {
    val quizSectionStart = content.indexOf("QUIZ:")
    val recommendedCourseStart = content.indexOf("RECOMMENDED COURSE:")
    val mindmapStart = content.indexOf("MINDMAP:")
    val flowchartStart = content.indexOf("FLOWCHART:")

    // Handle cases where markers aren't found
    if (quizSectionStart == -1 || recommendedCourseStart == -1) {
        // If we can't find the markers, just return the full content as quiz
        return Quad(content, "", "", "")
    }

    // Extract quiz section
    val quizContent = if (recommendedCourseStart > quizSectionStart) {
        content.substring(quizSectionStart + 5, recommendedCourseStart).trim()
    } else {
        content.substring(quizSectionStart + 5).trim()
    }

    // Extract course section
    val courseContent = if (mindmapStart > recommendedCourseStart && recommendedCourseStart > -1) {
        content.substring(recommendedCourseStart + 19, mindmapStart).trim()
    } else if (recommendedCourseStart > -1) {
        content.substring(recommendedCourseStart + 19).trim()
    } else {
        ""
    }

    // Extract mindmap section
    val mindmapContent = if (flowchartStart > mindmapStart && mindmapStart > -1) {
        content.substring(mindmapStart + 8, flowchartStart).trim()
    } else if (mindmapStart > -1) {
        content.substring(mindmapStart + 8).trim()
    } else {
        ""
    }

    // Extract flowchart section
    val flowchartContent = if (flowchartStart > -1) {
        content.substring(flowchartStart + 10).trim()
    } else {
        ""
    }

    return Quad(quizContent, courseContent, mindmapContent, flowchartContent)
}

// Helper class to return four values
data class Quad<A, B, C, D>(
    val first: A,
    val second: B,
    val third: C,
    val fourth: D
)
